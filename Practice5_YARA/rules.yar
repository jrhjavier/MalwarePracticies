/* RULE A */
rule Elf : practicaYARA_A  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify elf files by their magic number"

    strings:
	$id = {7F 45 4C 46}
    
    condition:
	$id at 0  /* elf files start with "7F 45 4C 46" (magic number) */
    }


/* RULE B */
rule PE : practicaYARA_B  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify PE files by their magic number"

    strings:
	$id = "MZ"  /* {4D 5A} also */
    
    condition:
	$id at 0  /* PE files start with "MZ" (magic number) */
    }


/* RULE C */
rule BigElf : practicaYARA_C  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify ELF files bigger than 500KB"

    condition:
	Elf and filesize > 500KB /* it satisfies the Elf rule and is bigger than 500KB */
    }


/* RULE D */
rule GPL : practicaYARA_D  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify ELF files with GPL 2 or 3 license"
    
    strings:
	$licenseGPL2 = "GNU GPL version 2 or later"
	$licenseGPL3 = "GNU GPL version 3 or later"

    condition:
	Elf and (#licenseGPL2 + #licenseGPL3) > 0 /* it satisfies the Elf rule and has the string $licenseGPL2 or $licenseGPL3 */
    }


/* RULE E */
rule Bin : practicaYARA_E  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify files with the secuence of bytes {38 45 1E A5 99 EE ?? ?? ?? ?? 59 C4 C3 0A F2 88}"

    strings:
	$bytes = {38 45 1E A5 99 EE ?? ?? ?? ?? 59 C4 C3 0A F2 88} /* the file contains 38 45 1E A5 99 EE, followed by 4 bytes, and then 59 C4 C3 0A F2 88 */
    
    condition:
	$bytes
    }


/* RULE F */
rule Identation : practicaYARA_F  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify ELF files bigger than 50KB that contanis the String: program indentation level too deep"

    strings:
    	$string = "program indentation level too deep"nocase /* nocase -> doesn't distinguish between upper and lower case */
    
    condition:
	Elf and filesize > 50KB and $string /* it satisfies the Elf rule and is bigger than 50KB and contains $string */
    }


/* RULE G */
rule BinOff : practicaYARA_G  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify files with the secuence of bytes {6D C8 7A 4E AD CA 07 C3} between the directions 0xb7b0 - 0xb970"

    strings:
    	$bytes = {6D C8 7A 4E AD CA 07 C3} 
    		
    condition:
	$bytes in (0xb7b0..0xb970) 
    }


/* RULE H */
rule Integer : practicaYARA_H  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Identify ELF files smaller than 20KB that contanis at least 2 of the next 3 integers: 121000, 121002, 18821"

    strings:
    	$bits1 = {A8 D8 01 00} /* 121000 in hexadecimal -> we have to use 8 bytes (32 bits) */
    	$bits2 = {AA D8 01 00} /* 121002 in hexadecimal */
    	$bits3 = {85 49 00 00} /* 18821 in hexadecimal */
    
    condition:
	Elf and filesize < 20KB and 2 of ($bits*)
    }


/* RULE I */
rule Regex : practicaYARA_I  /* name and tag */
{
    meta:
        authorname = "Javier Rojas Horrillo"
	authormail = "j.rojas.2020@alumnos.urjc.es"
	description = "Other files than ELF and PE that contain the output of a ps aux command from a Linux system"

    strings:
    	$first = /^USER\s+PID\s+%CPU\s+%MEM\s+VSZ\s+RSS\s+TTY\s+STAT\s+START\s+TIME\s+COMMAND\n/
	$regex1 = /\nroot\s+1\d{3}\s+(\d{1,2}\.\d\s+){2}(\d{1,}\s+){2}(\?|pts\/\d|tty(\d|))\s+(.)+\s+\d{2}:\d{2}\s+\d:\d{2}\s+\[lockd\]\n/
	$regex2 = /\ngdm\s+/
    
    condition:
	not Elf and not PE and $first and #regex1 > 0 and #regex2 > 20
    }


